"bp.1d",
"waist",
"hip",
"time.ppn"
)], cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(. ~ cols)
# library(GGally)
# ggpairs(diab[,c("chol", "stab.glu", "hdl", "ratio", "glyhb", "age", "height", "weight", "bp.1s", "bp.1d", "waist", "hip","time.ppn")])
library(tidyr)
ggplot(gather(diab[, c(
"chol",
"stab.glu",
"hdl",
"ratio",
"glyhb",
"age"
)], cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(. ~ cols)
ggplot(gather(diab[, c(
"height",
"weight",
"bp.1s",
"bp.1d",
"waist",
"hip",
"time.ppn"
)], cols, value), aes(x = value)) +
geom_histogram(binwidth = 30) + facet_grid(. ~ cols)
# library(GGally)
# ggpairs(diab[,c("chol", "stab.glu", "hdl", "ratio", "glyhb", "age", "height", "weight", "bp.1s", "bp.1d", "waist", "hip","time.ppn")])
library(tidyr)
ggplot(gather(diab[, c(
"chol",
"stab.glu",
"hdl",
"ratio"
)], cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(. ~ cols)
ggplot(gather(diab[, c(
"glyhb",
"age",
"height",
"weight"
)], cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(. ~ cols)
ggplot(gather(diab[, c(
"bp.1s",
"bp.1d",
"waist",
"hip",
"time.ppn"
)], cols, value), aes(x = value)) +
geom_histogram(binwidth = 30) + facet_grid(. ~ cols)
# library(GGally)
# ggpairs(diab[,c("chol", "stab.glu", "hdl", "ratio", "glyhb", "age", "height", "weight", "bp.1s", "bp.1d", "waist", "hip","time.ppn")])
pie(diab$location)
pie(table(diab$location)
pie(table(diab$location))
pie(table(diab$location))
table(diab$location)
pie(table(diab$gender))
pie(table(diab$frame))
diab$logGlyhb <- log(diab$glyhb)
diab$recipGlyhb <- 1 / (diab$glyhb)
diab$sqrtGlyhb <- sqrt(diab$glyhb)
ggplot(data = diab, aes(x = logGlyhb)) + geom_histogram()
ggplot(data = diab, aes(x = recipGlyhb)) + geom_histogram()
ggplot(data = diab, aes(x = sqrtGlyhb)) + geom_histogram()
diab$"glyhb*" <- diab$recipGlyhb
diab$"glyhb*" <- diab$recipGlyhb
diab$glyhb <- diab$"glyhb*"
library(GGally)
ggpairs(diab[,c("chol", "stab.glu", "hdl", "ratio", "glyhb", "age", "height", "weight", "bp.1s", "bp.1d", "waist", "hip","time.ppn")])
library(tidyr)
ggplot(gather(diab[, c(
"chol",
"stab.glu",
"hdl",
"ratio"
)], cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(. ~ cols)
ggplot(gather(diab[, c(
"age",
"height",
"weight",
"bp.1s"
)], cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(. ~ cols)
ggplot(gather(diab[, c(
"bp.1d",
"waist",
"hip",
"time.ppn"
)], cols, value), aes(x = value)) +
geom_histogram(binwidth = 30) + facet_grid(. ~ cols)
pie(table(diab$location))
pie(table(diab$gender))
pie(table(diab$frame))
library(GGally)
ggpairs(diab[,c("chol", "stab.glu", "hdl", "ratio", "age", "height", "weight", "bp.1s", "bp.1d", "waist", "hip","time.ppn")])
library(GGally)
library(plotly)
ggplotly(ggpairs(diab[,c("chol", "stab.glu", "hdl", "ratio", "age", "height", "weight", "bp.1s", "bp.1d", "waist", "hip","time.ppn")]))
ggplot(data = diab, aes(x = glyhb, color = gender)) + geom_boxplot()
ggplot(data = diab, aes(x = glyhb, color = gender)) + geom_boxplot()
ggplot(data = diab, aes(x = glyhb, color = frame)) + geom_boxplot()
ggplot(data = diab, aes(x = glyhb, color = gender)) + geom_boxplot()
ggplot(data = diab, aes(x = glyhb, color = frame)) + geom_boxplot()
install.packages("caTools")
set.seed(10)
install.packages("caTools")
sample <- sample.split(diab$glyhb, SplitRatio = 0.5)
set.seed(10)
library(caTools)
sample <- sample.split(diab$glyhb, SplitRatio = 0.5)
train  <- subset(diab, sample == TRUE)
test   <- subset(diab, sample == FALSE)
# simple way is to put labels on both datasets and remerge for comparisons
train$label <- rep("train", nrow(train))
test$label <- rep("test", nrow(test))
combin <- rbind(train, test)
combin
ggplot(data = commbin, aes(x = glyhb, color = label) + geom_boxplot()
ggplot(data = commbin, aes(x = glyhb, color = label) + geom_boxplot()
ggplot(data = commbin, aes(x = glyhb, color = label)) + geom_boxplot()
ggplot(data = combin, aes(x = glyhb, color = label)) + geom_boxplot()
set.seed(10)
library(caTools)
sample <- sample.split(diab$glyhb, SplitRatio = 0.5)
train  <- subset(diab, sample == TRUE)
test   <- subset(diab, sample == FALSE)
# simple way is to put labels on both datasets and remerge for comparisons
train$label <- rep("train", nrow(train))
test$label <- rep("test", nrow(test))
# Combined dataset now has labels for which is in train and which is in test/validation
combin <- rbind(train, test)
combin
ggplot(data = combin, aes(x = glyhb, color = label)) + geom_boxplot()
ggplot(data = combin, aes(x = stab.glu, color = label)) + geom_boxplot()
ggplot(data = combin, aes(x = ratio, color = label)) + geom_boxplot()
ggplot(data = combin, aes(x = age, color = label)) + geom_boxplot()
ggplot(data = combin, aes(x = bp.1s, color = label)) + geom_boxplot()
ggplot(data = combin, aes(x = waist, color = label)) + geom_boxplot()
diab
diab <- diab[,c(-17, 18, 19, 20)]
diab
diab <- diab[,c(-17, -18, -19, -20)]
diab
lm(glyhb~., diab)
# Fitting a first order model
# lm(glyhb ~ chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) + height)
model1 <- lm(glyhb~., diab)
summary(model1)
anova(model1)
anova(model1)
boxcox(model1)
library(MASS)
boxcox(model1)
library(leaps)
library(leaps)
regsubsets(model1)
regsubsets(model1, data = diab)
regsubsets(glyhb~., data = diab)
summary(regsubsets(glyhb~., data = diab))
reg <- regsubsets(glyhb~., data = diab)
library(leaps)
reg <- regsubsets(glyhb~., data = diab)
sumReg <- summary(reg)
sumReg$which
sumReg$rsq
cbind(sumReg$rsq, sumReg$rss
cbind(sumReg$rsq, sumReg$rss)
cbind(sumReg$rsq, sumReg$rss)
data.frame(SSE = sumReg$rss)
data.frame(SSE = sumReg$rss, R2 = sumReg$rsq, R2adj = sumReg$adjr2, Cp = sumReg$cp, BIC = sumReg$bic)
sumReg$outmat
sumReg$obj
AIC(sumReg)
AIC(sumReg)
AIC(reg)
library(leaps)
reg <- regsubsets(glyhb~., data = diab, nvmax = 16)
sumReg <- summary(reg)
data.frame(
SSE = sumReg$rss,
R2 = sumReg$rsq,
R2adj = sumReg$adjr2,
Cp = sumReg$cp,
BIC = sumReg$bic
)
sumReg
### Now we find which model had the optimum value
# SSE
which.min(sumReg$rss)
library(leaps)
reg <- regsubsets(glyhb~., data = diab, nvmax = 16)
sumReg <- summary(reg)
sumReg
# Dataframe for all the criterion (AIC is not printed by regsubset)
data.frame(
SSE = sumReg$rss,
R2 = sumReg$rsq,
R2adj = sumReg$adjr2,
Cp = sumReg$cp,
BIC = sumReg$bic
)
### Now we find which model had the optimum value
# SSE
which.min(sumReg$rss)
# R2
which.max(sumReg$rsq)
# R2adj
which.max(sumReg$adjr2)
# Cp
which.min(sumReg$cp)
# BIC
which.min(sumReg$bic)
stepAIC(model1)
stepAIC(nullModel1)
nullModel1 <- lm(glyhb~1, data = diab)
stepAIC(nullModel1)
stepAIC(nullModel1, scope = ".")
stepAIC(nullModel1, scope = model1)
stepAIC(nullModel1, scope = "chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) + height" + "weight" + "frame" + "bp.1s" + "bp.1d" + "waist" + "hip" + "time.ppn")
stepAIC(nullModel1,
scope = "chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn")
nullModel1 <- lm(glyhb~1, data = diab)
stepAIC(nullModel1,
scope = "chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn")
stepAIC(nullModel1,
scope = list(upper = "chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn"))
stepAIC(nullModel1,
scope = list(upper = "chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn"), lower = ~1)
nullModel1 <- lm(glyhb~1, data = diab)
stepAIC(
nullModel1,
scope = list(upper = "chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn",
lower = ~ 1)
)
stepAIC(
nullModel1,
scope = list(upper = "chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn",
lower = ~ 1), direction = "both", k = 2, trace = FALSE
)
nullModel1 <- lm(glyhb~1, data = diab)
stepAIC(
nullModel1,
scope = list(upper = "~chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn",
lower = ~ 1), direction = "both", k = 2, trace = FALSE
)
diab <- na.omit(diab)
nullModel1 <- lm(glyhb~1, data = diab)
stepAIC(
nullModel1,
scope = list(upper = "~chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn",
lower = ~ 1), direction = "both", k = 2, trace = FALSE
)
diab <- na.omit(diab)
nullModel1 <- lm(glyhb~1, data = diab)
stepAIC <- stepAIC(
nullModel1,
scope = list(upper = "~chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn",
lower = ~ 1), direction = "both", k = 2, trace = FALSE
)
stepAIC$anova
diab <- na.omit(diab)
nullModel1 <- lm(glyhb~1, data = diab)
stepAICfor <- stepAIC(
nullModel1,
scope = list(upper = "~chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn",
lower = ~ 1), direction = "foward", k = 2, trace = FALSE
)
stepAICfor <- stepAIC(
nullModel1,
scope = list(upper = "~chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn",
lower = ~ 1), direction = "forward", k = 2, trace = FALSE
)
stepAIC$anova
stepAICfor$anova
reg
library(MASS)
boxcox(model1)
sumReg
# Cp
which.min(sumReg$cp)
# Cp
which.min(sumReg$cp)
sumReg
#Since we know that Cp and AIC are proportional, we can pick the model based off the Cp, which was model 7, we build it here
AIC((
glyhb ~ chol + stab.glu + ratio + factor(location) + age + factor(frame) +
waist + time.ppn,
#Since we know that Cp and AIC are proportional, we can pick the model based off the Cp, which was model 7, we build it here
model7 <- lm(glyhb ~ chol + stab.glu + ratio + factor(location) + age + factor(frame) +
waist + time.ppn,
data = diab
))
#Since we know that Cp and AIC are proportional, we can pick the model based off the Cp, which was model 7, we build it here
model7 <- lm(glyhb ~ chol + stab.glu + ratio + factor(location) + age + factor(frame) +
waist + time.ppn,
data = diab
)
AIC(model7)
stepAICfor$anova
which.min(stepAICfor$anova)
stepAICfor$AIC
stepAICfor$anova
AIC(model7)
diab <- na.omit(diab)
nullModel1 <- lm(glyhb~1, data = diab)
stepAICfor <- stepAIC(
nullModel1,
scope = list(upper = "~chol + stab.glu + hdl + ratio + factor(location) + age + factor(gender) +height+weight+factor(frame)+bp.1s+bp.1d+waist+hip+time.ppn",
lower = ~ 1), direction = "forward", k = 2, trace = FALSE
)
stepAICfor$anova
#Since we know that Cp and AIC are proportional, we can pick the model based off the Cp, which was model 7, we build it here
model7 <- lm(glyhb ~ chol + stab.glu + ratio + factor(location) + age + factor(frame) +
waist + time.ppn,
data = diab
)
AIC(model7)
stepAICfor$model
stepAICfor$model
stepAICfor$model
summary(stepAICfor$model)
model7
lm(stepAICfor$model)
lm(stepAICfor$model)
model7
lm(stepAICfor$model)
model7
model7
lm(stepAICfor$model)
# Pick the final model from forward selection
modelfs1 <- lm(stepAICfor$model)
modelfs1
model7
modelfs1
AIC(model7)
AIC(modelfs1)
qqnorm(modelfs1)
qqline(modelfs1)
{qqnorm(modelfs1)
qqline(modelfs1)}
{qqnorm(modelfs1$residuals)}
qqline()}
{qqnorm(modelfs1$residuals)
qqline()}
{qqnorm(modelfs1$residuals)
qqline(modelfs1$residuals)}
plot(modelfs1$fitted.values, modelfs1$residuals)
abline()}
{plot(modelfs1$fitted.values, modelfs1$residuals)
abline()}
{qqnorm(modelfs1$residuals)
qqline(modelfs1$residuals)}
abline(slope = 0)}
plot(modelfs1$fitted.values, modelfs1$residuals)
abline(slope = 0)
{plot(modelfs1$fitted.values, modelfs1$residuals)
abline(slope = 0)
}
# {plot(modelfs1$fitted.values, modelfs1$residuals)
# abline(slope = 0)
plot(modelfs1)
# {plot(modelfs1$fitted.values, modelfs1$residuals)
# abline(slope = 0)
plot(modelfs1)[1]
# {plot(modelfs1$fitted.values, modelfs1$residuals)
# abline(slope = 0)
plot(modelfs1)
plot(modelfs1)
model2 <- lm(glyhb ~ .^2, data = diab)
summary(model2)
model2 <- lm(glyhb ~ .^2, data = diab)
summary(model2)
anova(model2)
model2 <- lm(glyhb ~ .^2, data = diab)
aovModel2 <- anova(model2)
aovModel2$`Mean Sq`
tail(aovModel2$`Mean Sq`, n = 1)
stepAIC(nullModel1, scope = list(upper= "~.^2", lower = "~1"), k = 2, direction = "forward")
stepAIC(nullModel1, scope = list(upper= ~.^2, lower = ~1), k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = list(upper= ~.^2, lower = ~1), k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = list(upper= ~.^2, lower = ~1), k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = . ~ .^2, k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = 1 ~ .^2, k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = list(lower = . ~ 1, upper = . ~ . + x), k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = list(lower = . ~ 1, upper = . ~ .  x), k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = list(lower = . ~ 1, upper = . ~ . ), k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = list(lower = . ~ 1, upper = . ~ .^2 ), k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = list(lower = ~ 1, upper = . ~ .^2 ), k = 2, direction = "forward", trace = F)
stepAIC(nullModel1, scope = list(lower = ~ 1, upper = . ~ .^2 ), k = 2, direction = "forward")
stepAIC(nullModel1, scope = list(lower = NULL, upper =  ~ .^2 ), k = 2, direction = "forward")
stepAIC(nullModel1, scope = list(lower = NULL, upper =  ~.^2 ), k = 2, direction = "forward")
stepAIC(
nullModel1,
scope = list(lower = NULL, upper =  ~ . ^ 2),
k = 2,
direction = "forward"
)
stepAIC(
nullModel1,
scope = list(lower = NULL, upper =  ~ . ^ 2),
k = 2,
direction = "forward",
trace = F
)
stepAIC(
nullModel1,
scope = list(lower = ~1, upper =  ~ . ^ 2),
k = 2,
direction = "forward",
trace = F
)
stepAIC(
nullModel1,
scope = list(lower = ~1, upper =  ~ . ^ 2),
k = 2,
direction = "forward",
trace = F
)
stepAIC(
model2,
scope = list(lower = ~1, upper =  ~ . ^ 2),
k = 2,
direction = "forward",
trace = F
)
stepAIC(
nullModel1,
scope = list(lower = ~1, upper =  ~ . ^ 2),
k = 2,
direction = "forward",
trace = F
)
stepAIC(
nullModel1,
scope = list(lower = ~1),
k = 2,
direction = "forward",
trace = F
)
stepAIC(
nullModel1,
k = 2,
direction = "forward",
trace = F
)
stepAIC(
nullmodel1,
scope = list(lower = nullModel1, upper = model2),
k = 2,
direction = "forward",
trace = F
)
stepAIC(
nullModel1,
scope = list(lower = nullModel1, upper = model2),
k = 2,
direction = "forward",
trace = F
)
stepAICfor2 <- stepAIC(
nullModel1,
scope = list(lower = nullModel1, upper = model2),
k = 2,
direction = "forward",
trace = F
)
modelfs2 <- stepAICfor2$model
modelfs2
modelfs2 <- lm(stepAICfor2$model)
modelfs2
# Compare to first model
AIC(modelfs1)
AIC(modelfs2)
AIC(modelfs1)
AIC(modelfs2)
plot(modelfs2)
# We perform forward stepwise procedure using AIC
stepAIC(modelfs1, scope = (lower = modelfs1, upper = modelfs2), k = 2, direction = "forward")
# We perform forward stepwise procedure using AIC
stepAIC(
modelfs1,
scope = (lower = modelfs1, upper = modelfs2),
# We perform forward stepwise procedure using AIC
stepAIC(
modelfs1,
scope = list(lower = modelfs1, upper = modelfs2),
k = 2,
direction = "forward"
)
# We perform forward stepwise procedure using AIC
stepAIC(
nullModel1,
scope = list(lower = nullModel1, upper = modelfs2),
k = 2,
direction = "forward"
)
setwd("~/Github/STA223/Homework/HW2")
load("~/Github/STA223/Homework/HW2/melanoma.txt")
read.table(melanoma.txt)
read.table("melanoma.txt")
?read.table
read.table("melanoma.txt", header = TRUE)
mela <- read.table("melanoma.txt", header = TRUE)
mela
glm.mela <- glm(totalincidence ~ years + sunspotnumber, data = mela, family = poission())
glm.mela <- glm(totalincidence ~ years + sunspotnumber, data = mela, family = poisson())
summary(glm.mela)
