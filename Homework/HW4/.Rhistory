to = c("gonorrhea", "chlamydia", "both")
)
# Symptom Percentages based on Initial Infection
symptoms <- c("itch","lesion","rash","lymph", "abdpain","discharge","dysuria")
ii_sub1 <- std0[which(std0$iinfct=="gonorrhea"),symptoms]
ii_sub2 <- std0[which(std0$iinfct=="chlamydia"),symptoms]
ii_sub3 <- std0[which(std0$iinfct=="both"),symptoms]
ii_sub1 <- colSums((ii_sub1))/nrow(ii_sub1)
ii_sub2 <- colSums((ii_sub2))/nrow(ii_sub2)
ii_sub3 <- colSums((ii_sub3))/nrow(ii_sub3)
ii_sub1["infection"] = "gonorrhea"
ii_sub2["infection"] = "chlamydia"
ii_sub3["infection"] = "both"
ii_symptom <- as.data.frame(rbind(ii_sub1, ii_sub2, ii_sub3))
ii_symptom_long <- pivot_longer(ii_symptom, !infection, names_to="Symptom",values_to="percentage")
ii_symptom_long$percentage <- as.numeric(ii_symptom_long$percentage)
ggplotly(
ggplot(ii_symptom_long, aes(
x = infection, y = percentage, fill = Symptom
)) +
geom_col(position = "dodge") +
scale_y_continuous(
labels = function(x)
paste0(x * 100, "%")
) +
labs(title = "Distribution of Symptoms For Three Initial Infection Types",
x = "Initial Infection Type", y = "Percentage") + theme_minimal()
)
ggplotly(
ggplot(data = std) +
geom_boxplot(aes(
x = as.factor(std$yschool),
y = age,
fill = as.factor(std$yschool)
)) +
labs(
title = "Years of Education vs. Age",
x = "Years of Schooling",
y = "Age",
fill = "Years"
) + scale_fill_brewer(palette = "BuPu")
)
ggplotly(ggplot(data=std)+
geom_boxplot(aes(x=as.factor(npartner), y=age, fill=as.factor(npartner)))+
labs(title="Number of Partners vs. Age", x="Number of Partners", y="Age", fill = "Number of Partners") + scale_fill_brewer(palette="BuPu")
)
KMobj <- survfit(surv_object ~ iinfct, data = std)
KMplot <-
ggsurvplot(KMobj,
palette = c("#daed64", "#6495ed", "#ed7864"),
ggtheme = theme_minimal()) + labs(title = "Kaplan-Meier Curves for Initial Infection Type")
ggplotly(KMplot[[1]])
survdiff(surv_object ~ iinfct, data = std)
timevec <- 1:1500
#First hazard (Gonorrhea)
sf1 <- stepfun(KMobj[1]$time, c(1, KMobj[1]$surv))
#Second hazard (Chlamydia)
sf2 <- stepfun(KMobj[2]$time, c(1, KMobj[2]$surv))
#Third hazard (Both)
sf3 <- stepfun(KMobj[3]$time, c(1, KMobj[3]$surv))
#now we can find the cumulative hazards
cumhaz1 <- -log(sf1(timevec))
cumhaz2 <- -log(sf2(timevec))
cumhaz3 <- -log(sf3(timevec))
#Hazard Ratio
ggplotly(
ggplot(ggtheme = theme_minimal()) + aes(x = timevec) + geom_line(aes(y = cumhaz1 / cumhaz2), col = "#daed64") + geom_line(aes(y = cumhaz3 / cumhaz1), col = "#6495ed") + geom_line(aes(y = cumhaz3 / cumhaz2), col = "#ed7864") +  labs(x = "Time", y = "Hazard Ratio", title = "Hazard Ratios for Three Initial Infections")
)
# {plot(survfit(surv_object ~ iinfct, data = std),col=4:6,lwd=1,fun="cumhaz")
# title("Cumulative Hazard for intital infection")
# legend("topleft",c("gonorrhea","chlamydia","both"),col=4:6,lwd=1)}
# Interactive plot
# Cumulative Hazard
cumHazPlot <-
ggsurvplot(
KMobj,
fun = "cumhaz",
conf.int = FALSE,
palette = c("#daed64", "#6495ed", "#ed7864"),
ggtheme =theme_minimal()
) + ggtitle("Cumulative Hazard for Initial Infection Type")
ggplotly(cumHazPlot$plot)
# Complimentary Log-Log
cLogLogPlot <-
ggsurvplot(
KMobj,
fun = "cloglog",
palette = c("#daed64", "#6495ed", "#ed7864"),
ggtheme = theme_minimal()
) + ggtitle("Complimentary Log-Log for Initial Infection Type")
ggplotly(cLogLogPlot[[1]])
cox <- coxph(surv_object ~ iinfct, data = std)
summary(cox)
hodg.zph <- cox.zph(cox)
# plot(hodg.zph, main = "Schoenfeld Residuals for Initial Infection Type")
#For initial infection
ggcoxzph(hodg.zph[1], se = FALSE, font.main = 12, ggtheme = theme_minimal(), point.col = "#6495ed")
cox1 <-
coxph(
surv_object ~ iinfct + marital + race + os12m + os30d +
rs12m + rs30d + abdpain + discharge + dysuria + condom +
itch + lesion + rash + lymph + vagina + dchexam + abnode +
age + yschool + npartner,
data = std
)
summary(cox1)
#summary(cox1)
drop1(cox1, test = "Chisq")
std$condom <-
mapvalues(
std$condom,
from = c("always", "sometime", "never"),
to = c("use", "use", "never")
)
cox.model = coxph(surv_object ~ iinfct+condom+vagina
+dchexam+yschool, data = std)
summary(cox.model)
cox.modelNoSchool <- coxph(surv_object ~ iinfct+condom+vagina+os30d+abdpain, data = std)
martNoSchool <- residuals(cox.modelNoSchool, type = "martingale")
# We plot martingale residuals to see if transformation is appropriate
lowessOBJ <- as.data.frame(lowess(std$yschool, martNoSchool))
ggplotly(
ggplot() + aes(std$yschool, martNoSchool) + geom_point() +
labs(x = "Years of School", y = "Martingale Residuals", title = "Martingale Residuals vs. Years of School") +
geom_line(data = lowessOBJ, aes(x = x, y = y), col = "#6495ed")
)
cat_yschool = cut(std$yschool,
c(-Inf, 8, 12, Inf),
labels = c("6-8", "9-12", "above 12"))
std['cat_yschool'] = cat_yschool
# re-level to use "9-12" as the reference group since it's survival curve is in between the other two groups
std$cat_yschool = relevel(std$cat_yschool, ref="9-12")
# For the rest of the analysis..
############### THE FINAL MODEL #####################
# cox.model = coxph(surv_object ~ iinfct+condom+vagina+dchexam+yschool, data = std)
# summary(cox.model)
#####################################################
# Create residuals
b.mart <- residuals(cox.model,type="martingale")
b.dev <- residuals(cox.model,type="deviance")
b.dfb <- residuals(cox.model,type="dfbeta")
b.preds <- predict(cox.model)
#library(patchwork)
library(gridExtra)
test.ph <- cox.zph(cox.model)
test.ph
# #plot(test.ph[1], main = "Schoenfeld Residuals for differernt initial infection types")
#
# #Condom use
# p1 <- ggcoxzph(test.ph[2], ggtheme =theme_minimal(),  se = FALSE, font.main = 12, point.col = "#ed7864")
#
# #Vaginal use
# p2 <- ggcoxzph(test.ph[3], ggtheme =theme_minimal(),  se = FALSE, font.main = 12, point.col = "#ed7864")
#
# #Discharge at exam use
# p3 <- ggcoxzph(test.ph[4], ggtheme =theme_minimal(),  se = FALSE, font.main = 12, point.col = "#ed7864")
#
# # Years of schooling
# p4 <- ggcoxzph(test.ph[5], ggtheme =theme_minimal(),  se = FALSE, font.main = 12, point.col = "#ed7864")
# p1
# p2
# p3
# p4
ggplotly(ggcoxdiagnostics(cox.model, type = "schoenfeld"))
# years of school
figdfb1 <- ggplotly(
ggplot() + aes(
x = std$obs,
y = b.dfb[, 6],
text = paste("Obs:", std$obs, "\ndfBeta:", round(b.dfb[, 4], 4))
) + geom_point() + labs(x = "Observation Number", y = "Years of School (Categorical)", title = "dfbeta Values for Years of School"),
tooltip = "text"
)
# Discharge at Exam
figdfb2 <- ggplotly(
ggplot() + aes(
x = std$obs,
y = b.dfb[, 5],
text = paste("Obs:", std$obs, "\ndfBeta:", round(b.dfb[, 5], 4))
) + geom_point() + labs(x = "Observation Number", y = "Discharge at Exam", title = "dfbeta Values for Discharge at Exam"),
tooltip = "text"
)
# Vaginal Involvement
figdfb3 <- ggplotly(
ggplot() + aes(
x = std$obs,
y = b.dfb[, 4],
text = paste("Obs:", std$obs, "\ndfBeta:", round(b.dfb[, 6], 4))
) + geom_point() + labs(x = "Observation Number", y = "Vaginal Involvement at Exam", title = "dfbeta Values for Vaginal Involvement at Exam"),
tooltip = "text"
)
# Condom
figdfb4 <- ggplotly(
ggplot() + aes(
x = std$obs,
y = b.dfb[, 3],
text = paste("Obs:", std$obs, "\ndfBeta:", round(b.dfb[, 6], 4))
) + geom_point() + labs(x = "Observation Number", y = "Condom", title = "dfbeta Values for Condom Usage"),
tooltip = "text"
)
fig <- subplot(
figdfb1,
figdfb2,
figdfb3,
figdfb4,
nrows = 2,
shareX = TRUE,
shareY = TRUE
) %>% layout(title = "dfBeta values for Years of Schooling, Discharge at Exam, Vaginal Involvement, \nand Condom Usage")
# Update title
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "Years of Schooling",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "Discharge at Exam",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.475,
text = "Vaginal Involvement",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.475,
text = "Condom Usage",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
))
fig <- fig %>%layout(annotations = annotations)
fig
std.cs <- std$rinfct - b.mart
#Cumulative hazard
surv.csr <- survfit(Surv(std.cs, std$rinfct) ~1, type = "fleming-harrington", data = std)
cumHazPlot <-
ggsurvplot(
surv.csr,
fun = "cumhaz",
conf.int = TRUE,
palette = c("#581845"),
ggtheme = theme_minimal()
) + ggtitle("Cumulative Hazard for Cox-Snell Residuals")
#ggplotly(cumHazPlot$plot + geom_abline())
cumHazPlot$plot + geom_abline()
############### THE FINAL MODEL ####################
# cox.model = coxph(surv_object ~ iinfct+condom+vagina+yschool+os30d+abdpain+ condom + dchexam, data = std)
#cox.model = coxph(surv_object ~ iinfct+condom+vagina+dchexam+yschool, data = std)
summary(cox.model)
#drop1(cox.model)
#####################################################
#Martingale vs Linear Predictor
ggplotly(
ggplot() + aes(
x = b.preds,
y = b.mart,
label = std$obs
) + geom_point() + labs(x = "Linear Predictor", y = "Martingale Residual", title = "Martingale Residuals vs Linear Predictor")
)
unusualpts <- c(11, 366,525,831)
std[unusualpts,]
ggforest(cox.model, data = std)
fig1
figTest <- hist(rnorm(n = 100))
figTest
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1 <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
summary(fit1)
plot(fit1)
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.5), data = zmk)
#summary(fit1)
plot(fit1)
plot(fit2)
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.5), data = zmk)
#summary(fit1)
plot(fit1over)
plot(fit2over)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over)
plot(fit2over)
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over, main = "Overfitting with Smoothing Parameter = 0.1")
plot(fit2over, main = "Overfitting with Smoothing Parameter = 0.05")
# Now we
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over, main = "Overfitting with Smoothing Parameter = 0.1")
plot(fit2over, main = "Overfitting with Smoothing Parameter = 0.05")
# Now we plot with underfitting
fit1under <- locfit(Force ~ lp(Voltage, nn = 0.7), data = zmk)
fit2under <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1under, main = "Underfitting with Smoothing Parameter = 0.7")
plot(fit2under, main = "Underfitting with Smoothing Parameter = 0.05")
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over, main = "Overfitting with Smoothing Parameter = 0.1")
plot(fit2over, main = "Overfitting with Smoothing Parameter = 0.05")
# Now we plot with underfitting
fit1under <- locfit(Force ~ lp(Voltage, nn = 2), data = zmk)
fit2under <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1under, main = "Underfitting with Smoothing Parameter = 2")
plot(fit2under, main = "Underfitting with Smoothing Parameter = 0.05")
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over, main = "Overfitting with Smoothing Parameter = 0.1")
plot(fit2over, main = "Overfitting with Smoothing Parameter = 0.05")
# Now we plot with underfitting
fit1under <- locfit(Force ~ lp(Voltage, nn = 2), data = zmk)
fit2under <- locfit(Force ~ lp(Voltage, nn = 10), data = zmk)
#summary(fit1)
plot(fit1under, main = "Underfitting with Smoothing Parameter = 2")
plot(fit2under, main = "Underfitting with Smoothing Parameter = 10")
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over, main = "Overfitting with Smoothing Parameter = 0.1")
plot(fit2over, main = "Overfitting with Smoothing Parameter = 0.05")
# Now we plot with underfitting
fit1under <- locfit(Force ~ lp(Voltage, nn = 2), data = zmk)
fit2under <- locfit(Force ~ lp(Voltage, nn = 20), data = zmk)
#summary(fit1)
plot(fit1under, main = "Underfitting with Smoothing Parameter = 2")
plot(fit2under, main = "Underfitting with Smoothing Parameter = 10")
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over, main = "Overfitting with Smoothing Parameter = 0.1")
plot(fit2over, main = "Overfitting with Smoothing Parameter = 0.05")
# Now we plot with underfitting
fit1under <- locfit(Force ~ lp(Voltage, nn = 1), data = zmk)
fit2under <- locfit(Force ~ lp(Voltage, nn = 20), data = zmk)
#summary(fit1)
plot(fit1under, main = "Underfitting with Smoothing Parameter = 2")
plot(fit2under, main = "Underfitting with Smoothing Parameter = 20")
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over, main = "Oversmoothing with Smoothing Parameter = 0.1")
plot(fit2over, main = "Oversmoothing with Smoothing Parameter = 0.05")
# Now we plot with underfitting
fit1under <- locfit(Force ~ lp(Voltage, nn = 1), data = zmk)
fit2under <- locfit(Force ~ lp(Voltage, nn = 20), data = zmk)
#summary(fit1)
plot(fit1under, main = "Undersmoothing with Smoothing Parameter = 2")
plot(fit2under, main = "Undersmoothing with Smoothing Parameter = 20")
fit.good <- locfit(Force ~ lp(Voltage, nn = 0.7), data = zmk)
plot(fit.good)
points(zmk$Voltage, zmk$Force)
fit.good <- locfit(Force ~ lp(Voltage, nn = 0.7), data = zmk)
plot(fit.good)
points(zmk$Voltage, zmk$Force)
fit.good <- locfit(Force ~ lp(Voltage, nn = 0.7), data = zmk)
plot(fit.good, color = "red")
points(zmk$Voltage, zmk$Force)
fit.good <- locfit(Force ~ lp(Voltage, nn = 0.7), data = zmk)
plot(fit.good, col = "red")
points(zmk$Voltage, zmk$Force)
fit.good <- locfit(Force ~ lp(Voltage, nn = 0.8), data = zmk)
plot(fit.good, col = "red")
points(zmk$Voltage, zmk$Force)
points(zmk$Voltage, zmk$Force)
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over,col = "red", main = "Oversmoothing with Smoothing Parameter = 0.1")
points(zmk$Voltage, zmk$Force)
plot(fit2over,col = "red", main = "Oversmoothing with Smoothing Parameter = 0.05")
points(zmk$Voltage, zmk$Force)
# Now we plot with underfitting
fit1under <- locfit(Force ~ lp(Voltage, nn = 1), data = zmk)
fit2under <- locfit(Force ~ lp(Voltage, nn = 20), data = zmk)
#summary(fit1)
plot(fit1under,col = "red", main = "Undersmoothing with Smoothing Parameter = 2")
plot(fit2under,col = "red", main = "Undersmoothing with Smoothing Parameter = 20")
zmk <- read.table("zmk.txt", header = FALSE)
names(zmk) <- c("Voltage", "Force")
plot(zmk$Voltage, zmk$Force)
library(locfit)
fit1over <- locfit(Force ~ lp(Voltage, nn = 0.1), data = zmk)
fit2over <- locfit(Force ~ lp(Voltage, nn = 0.05), data = zmk)
#summary(fit1)
plot(fit1over,col = "red", main = "Oversmoothing with Smoothing Parameter = 0.1")
points(zmk$Voltage, zmk$Force)
plot(fit2over,col = "red", main = "Oversmoothing with Smoothing Parameter = 0.05")
points(zmk$Voltage, zmk$Force)
# Now we plot with underfitting
fit1under <- locfit(Force ~ lp(Voltage, nn = 1), data = zmk)
fit2under <- locfit(Force ~ lp(Voltage, nn = 20), data = zmk)
#summary(fit1)
plot(fit1under,col = "red", main = "Undersmoothing with Smoothing Parameter = 2")
points(zmk$Voltage, zmk$Force)
plot(fit2under,col = "red", main = "Undersmoothing with Smoothing Parameter = 20")
points(zmk$Voltage, zmk$Force)
mela <- read.table("melanoma.txt", header = TRUE)
#xtable(head(mela))
glm.mela <- glm(totalincidence ~ years + sunspotnumber, data = mela, family = poisson())
xtable(summary(glm.mela))
mela <- read.table("melanoma.txt", header = TRUE)
#xtable(head(mela))
glm.mela <- glm(totalincidence ~ years + sunspotnumber, data = mela, family = poisson())
print(xtable(summary(glm.mela)), type = "latex", comment= FALSE)
kable(summary(glm.mela))
?kable
library(xtable)
library(knitr)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
mela <- read.table("melanoma.txt", header = TRUE)
#xtable(head(mela))
glm.mela <- glm(totalincidence ~ years + sunspotnumber, data = mela, family = poisson())
print(xtable(summary(glm.mela)), type = "latex", comment= FALSE)
summary(glm.mela)
kable(summary(glm.mela))
kable(anova(glm.mela, test = "Chisq"))
unclass(summary(glm.mela))
kable(unclass(summary(glm.mela)))
kable(as.data.frame(unclass(summary(glm.mela))))
glm.mela
kable(glm.mela)
mela <- read.table("melanoma.txt", header = TRUE)
#xtable(head(mela))
glm.mela <- glm(totalincidence ~ years + sunspotnumber, data = mela, family = poisson())
sum.mela <- summary(glm.mela)
#print(xtable(summary(glm.mela)), type = "latex", comment= FALSE)
kable(sum.mela)
library(xtable)
library(knitr)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
#print(xtable(summary(glm.mela)), type = "latex", comment= FALSE)
kable(sum.mela$coefficients)
setwd("~/GitHub/STA223/Homework/HW4")
