load("~/ICPSR_38090/DS0003/38090-0003-Data.rda")
load("/ICPSR_38090/DS0003/38090-0003-Data.rda")
load("Project 2/ICPSR_38090/DS0003/38090-0003-Data.rda")
setwd("~/GitHub/STA223/Projects/Project 2")
load("/ICPSR_38090/DS0003/38090-0003-Data.rda")
load("~/ICPSR_38090/DS0003/38090-0003-Data.rda")
load("~./ICPSR_38090/DS0003/38090-0003-Data.rda")
load("./ICPSR_38090/DS0003/38090-0003-Data.rda")
load("./ICPSR_38090/DS0004/38090-0004-Data.rda")
crime <- da38090.0003[,1:109]
# Loading in the data
load("./ICPSR_38090/DS0003/38090-0003-Data.rda")
load("./ICPSR_38090/DS0004/38090-0004-Data.rda")
crime <- da38090.0003[,1:109]
#head(crime)
#head(da38090.0003)
# Get dataframe labels
#labels <- map_chr(1:ncol(da38090.0003), function(x) attr(da38090.0003[[x]], "variable.labels"))
labels <- attr(da38090.0003, "variable.labels")
load("C:/Users/Gianni/AppData/Local/Temp/Temp2_ICPSR_38090-V1.zip/ICPSR_38090/DS0004/38090-0004-Data.rda")
crime <- da38090.0003[,1:109]
#head(crime)
#head(da38090.0003)
# Get dataframe labels
#labels <- map_chr(1:ncol(da38090.0003), function(x) attr(da38090.0003[[x]], "variable.labels"))
labels <- attr(da38090.0003, "variable.labels")
load("C:/Users/Gianni/AppData/Local/Temp/Temp2_ICPSR_38090-V1.zip/ICPSR_38090/DS0004/38090-0004-Data.rda")
crime.join
crime.join <- merge(crime, ID.report, by = c("IDHH", "IDPER"))
crime <- da38090.0003[,1:109]
#head(crime)
#head(da38090.0003)
# Get dataframe labels
#labels <- map_chr(1:ncol(da38090.0003), function(x) attr(da38090.0003[[x]], "variable.labels"))
labels <- attr(da38090.0003, "variable.labels")
View(da38090.0004)
# Column 455 is column which that states whether crime was reported to police or not
# Going to gather Household ID and column of reports, and join on data set 0003
ID.report <- da38090.0004[,c(3,4, 455)]
ID.report
# We want an inner join, where matching keys give us household information and whether or not they reported
crime.join <- merge(crime, ID.report, by = c("IDHH", "IDPER"))
crime.join
table(crime.join$V4399)
crime <- da38090.0003[,1:109]
#head(crime)
#head(da38090.0003)
# Get dataframe labels
#labels <- map_chr(1:ncol(da38090.0003), function(x) attr(da38090.0003[[x]], "variable.labels"))
labels <- attr(da38090.0003, "variable.labels")
#View(da38090.0004)
# Column 455 is column which that states whether crime was reported to police or not
# Going to gather Household ID and column of reports, and join on data set 0003
ID.report <- da38090.0004[,c(3,4, 455)]
ID.report
# We want an inner join, where matching keys give us household information and whether or not they reported
crime.join <- merge(crime, ID.report, by = c("IDHH", "IDPER"))
crime.join
table(crime.join$V4399)
crime.join
# What values are in "V3001"
table(crime.join$V3001)
crime.join
labels <- attr(da38090.0003, "variable.labels")
labels
copy_labels
install.packages("sjlabelled")
library(sjlabelled)
# Get labels for crime dataset
crime <- copy_labels(df_new = crime, df_origin = da308090.0003)
# Get labels for crime dataset
crime <- copy_labels(df_new = crime, df_origin = da38090.0003)
crime
View(crime
View(crime)
view(crime)
View(crime)
crime <- da38090.0003[,1:109]
# Get labels for crime dataset
crime <- copy_labels(df_new = crime, df_origin = da38090.0003)
View(crime)
dat(efc)
data(efc)
efc
View(efc)
efc.sub <- subset(efc, subset = e16sex == 1, select = c(4:8))
View(efc.sub)
efc.sub <- copy_labels(efc.sub, efc)
View(efc.sub)
crime <- da38090.0003[,1:109]
# Get labels for crime dataset
crime <- copy_labels(df_new = crime, df_origin = da38090.0003)
View(crime)
#crime <- da38090.0003[,1:109]
crime <- da38090.0003[,1:5]
# Get labels for crime dataset
crime <- copy_labels(df_new = crime, df_origin = da38090.0003)
View(crime)
str(crime)
str(efc)
str(efc.sub)
crime <- da38090.0003[,1:109]
# Get labels for crime dataset
crime <- copy_labels(df_new = crime, df_origin = da38090.0003)
View(crime)
# Get labels for crime dataset
crime <- copy_labels(crime, da38090.0003)
View(crime)
str(crime)
crime <- subset(da38090.0003, select = c(1:109))
# Get labels for crime dataset
crime <- copy_labels(crime, da38090.0003)
View(crime)
str(crime)
attributes(crime)
c(labels)
attributes(da38090.0003)
attr(da38090.0003, names)
attr(da38090.0003, "names)
lo
attr(da38090.0003, "names")
attr(da38090.0003, "names")
colnames <- attr(da38090.0003, "names")
gsub(colnames, ',', labels)
colnames[1]
for (i in 1:length(colnames)){
gsub(colname[i], ',', labels)
}
gsub(colnames[i], ',', labels)
for (i in 1:length(colnames)){
gsub(colnames[i], ',', labels)
}
labels
ID.report <- copy_labels(ID.report, da38090.0004)
View(ID.report)
View(efc)
attributes(efc.sub)
attributes(efc)
attributes(efc$c12hour)
attributes(da38090.0003)
library(haven)
var_labels(da38090.0003)
library(stringr)
strsplit(labels, split = """")
strsplit(labels, split = "'")
data.frame(strsplit(labels, split = "'"))
data.frame(strsplit(labels, split = "'"))[1,]
data.frame(strsplit(labels, split = "'"))[1,1:109] # Finally
t(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
labels.df
lables.ls <- list(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
labels.ls
labels.ls <- list(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
labels.ls
labels.ls <- c(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
labels.ls
labels.ls$V3001
var.labels <- c(age = "Age in Years",
sex = "Sex of the participant")
var.labels$age
var.labels
labels.ls
str(var.labels)
str(labels.ls)
attributes(labels.ls)
attr(labels.ls, "names")
library(Hmisc)
var.labels <- attr(labels.ls, "names") #https://stackoverflow.com/questions/27347548/r-assign-variable-labels-of-data-frame-columns
label(crime) <- as.list(var.labels[match(names(crime), names(var.labels))])
label(crime)
#label(crime) <- as.list(var.labels[match(names(crime), names(var.labels))])
crime <- upData(crime, labels = var.labels)
attr(labels.ls, "names")
labels.ls <- list(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
labels.ls
var.labels <- attr(labels.ls, "names") #https://stackoverflow.com/questions/27347548/r-assign-variable-labels-of-data-frame-columns
#label(crime) <- as.list(var.labels[match(names(crime), names(var.labels))])
crime <- upData(crime, labels = var.labels)
crime
View(crime)
var.labels <- c(age = "Age in Years",
sex = "Sex of the participant")
attributes(var.labels)
attributes(labels.ls)
labels.ls <- list(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
attributes(labels.ls)
labels.ls <- c(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
labels.ls <- c(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
attributes(labels.ls)
#label(crime) <- as.list(var.labels[match(names(crime), names(var.labels))])
crime <- upData(crime, labels = var.labels)
var.labels <- attr(labels.ls, "names") #https://stackoverflow.com/questions/27347548/r-assign-variable-labels-of-data-frame-columns
#label(crime) <- as.list(var.labels[match(names(crime), names(var.labels))])
crime <- upData(crime, labels = var.labels)
var.labels <- c(age = "Age in Years",
sex = "Sex of the participant")
var.labels
var.labels <- attr(labels.ls, "names") #https://stackoverflow.com/questions/27347548/r-assign-variable-labels-of-data-frame-columns
var.labels
# This is the only way I have gotten it to work
labels <- attr(da38090.0003, "variable.labels")
labels.ls <- c(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
labels.ls
shape(labels.ls)
dim(labels.ls)
length(labels.ls)
attributes(labels.ls)
var.labels <- c(attr(labels.ls, "names") = labels.ls)
var.labels <- c(attr(labels.ls, "names") = labels.ls))
var.labels <- c('[attr(labels.ls, "names")]' = labels.ls))
var.labels <- c(attr(labels.ls, "names") = labels.ls))
var.labels <- setNames(attr(labels.ls, "names"), labels.ls)
var.labels
length(var.labels)
#label(crime) <- as.list(var.labels[match(names(crime), names(var.labels))])
crime <- upData(crime, labels = var.labels)
View(crime)
var.labels
var.labels <- setNames(labels.ls, attr(labels.ls, "names")) # https://stackoverflow.com/questions/7535412/create-a-numeric-vector-with-names-in-one-statement
var.labels
#label(crime) <- as.list(var.labels[match(names(crime), names(var.labels))])
crime <- upData(crime, labels = var.labels)
View(crime)
var.labels
labels.ls
#crime <- upData(crime, labels = var.labels)
crime <- upData(crime, labels = labels.ls)
View(crime)
crime <- da38090.0003[,1:109]
# Get labels for crime dataset
# This is the only way I have gotten it to work
labels <- attr(da38090.0003, "variable.labels")
labels.ls <- c(data.frame(strsplit(labels, split = "'"))[1,1:109]) # Finally
# Make a list of variable names
#var.labels <- setNames(labels.ls, attr(labels.ls, "names")) # https://stackoverflow.com/questions/7535412/create-a-numeric-vector-with-names-in-one-statement
#crime <- upData(crime, labels = var.labels)
crime <- upData(crime, labels = labels.ls)
View(crime)
subset(crime, select = 1:4)
View(subset(crime, select = 1:4))
labels.4 <- attr(da38090.0004, "variable.labels")
labels.4
labels.ls4
labels.ls4 <- c(data.frame(strsplit(labels.4, split = "'"))[,1:109])
labels.4 <- attr(da38090.0004, "variable.labels")
labels.ls4 <- c(data.frame(strsplit(labels.4, split = "'"))[,1:109])
labels.ls4 <- c(data.frame(strsplit(labels.4, split = "'")))
strsplit(labels.4, split = "'")
data.frame(strsplit(labels.4, split = "'"))
length(strsplit(labels.4, split = "'"))
ID.report <- upData(ID.report, labels = labels.ls4)
labels.ls4 <- strsplit(labels.4, split = "'")
ID.report <- upData(ID.report, labels = labels.ls4)
crime <- da38090.0003[,1:109]
# Get labels for crime dataset
# This is the only way I have gotten it to work
labels <- attr(da38090.0003, "variable.labels")
labels.ls <- c(data.frame(strsplit(labels, split = "'"))[1,1:109])
# Make a list of variable names
#var.labels <- setNames(labels.ls, attr(labels.ls, "names")) # https://stackoverflow.com/questions/7535412/create-a-numeric-vector-with-names-in-one-statement
#crime <- upData(crime, labels = var.labels)
crime <- upData(crime, labels = labels.ls)
View(crime)
# Going to gather Household ID and column of reports, and join on data set 0003
ID.report <- da38090.0004[,c(3,4, 455)]
ID.report
labels.4 <- attr(da38090.0004, "variable.labels")
labels.ls4 <- strsplit(labels.4, split = "'")
labels.4
str(labels.4)
labels.ls4 <- strsplit(labels.4, split = "'")
str(labels.ls4)
labels.ls4 <- strsplit(labels.4, split = "'")[c(3,4,455)]
ID.report <- upData(ID.report, labels = labels.ls4)
View(ID.report)
crime.join <- merge(crime, ID.report, by = c("IDHH", "IDPER"))
crime.join
View(crime.join)
library(dplyr)
# Count the NAs in all columns
crime.join %>% select(everything()) %>% summarise_all(funs(sum(is.na(.))))
# Count the NAs in all columns and find what is the proportion of them to the entire dataset
crime.join %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)) / nrow(crime.join)))
# Count the NAs in all columns and find what is the proportion of them to the entire dataset
crime.join %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)) / nrow(crime.join))) > 0.1
# Count the NAs in all columns and find what is the proportion of them to the entire dataset
which(crime.join %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)) / nrow(crime.join))) > 0.1)
# Count the NAs in all columns and find what is the proportion of them to the entire dataset
crime.join %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)) / nrow(crime.join)))
# Find all the columns where more than 10% NA
NAprop > 0.1 == TRUE
# Find all the columns where more than 10% NA
which(NAprop > 0.1)
# Count the NAs in all columns and find what is the proportion of them to the entire dataset
NAprop <- crime.join %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)) / nrow(crime.join)))
# Find all the columns where more than 10% NA
which(NAprop > 0.1)
NAprop[which(NAprop > 0.1)]
# Find all the columns where more than 10% NA
NAmore10 <- which(NAprop > 0.1)
NAprop[NAmore10]
View(crime.join[NAmore10])
NAprop[NAmore10]
# Find all the columns where more than 50% NA
NAmore50 <- which(NAprop > 0.5)
NAprop[NAmore10]
NAprop[NAmore50]
View(crime.join[NAmore50])
View(da38090.0003)
View(da38090.0004)
crime <- da38090.0003[,1:109]
View(crime)
attributes(crime)
attributes(da38090.0003)
# Get labels for crime dataset
# This is the only way I have gotten it to work
labels <- attr(da38090.0003, "variable.labels")
labels
strsplit(labels, split = "'")
data.frame(strsplit(labels, split = "'"))
# Make a list of variable names
#var.labels <- setNames(labels.ls, attr(labels.ls, "names")) # https://stackoverflow.com/questions/7535412/create-a-numeric-vector-with-names-in-one-statement
#crime <- upData(crime, labels = var.labels)
crime <- upData(crime, labels = labels.ls)
View(crime)
attributes(crime)
attributes(crime$V3001)
subset(crime, select = 1:4)
View(subset(crime, select = 1:4))
# What values are in "V3001"
table(crime.join$V3001) # just one value, drop it
# Going to gather Household ID and column of reports, and join on data set 0003
ID.report <- da38090.0004[,c(3,4, 455)]
ID.report
labels.4 <- attr(da38090.0004, "variable.labels")
labels.ls4 <- strsplit(labels.4, split = "'")[c(3,4,455)]
ID.report <- upData(ID.report, labels = labels.ls4)
View(ID.report)
# This is our response
table(crime.join$V4399)
# Count the NAs in all columns and find what is the proportion of them to the entire data set
NAprop <- crime.join %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)) / nrow(crime.join)))
# Find all the columns where more than 50% NA
NAmore50 <- which(NAprop > 0.5)
NAprop[NAmore50]
crime.red <- select(crime.join, NAmore50)
crime.red <- crime.join %>% select(crime.join, NAmore50)
crime.red <- dplyr::select(crime.join, NAmore50)
crime.red
crime.red <- dplyr::select(crime.join, -NAmore50)
crime.red
View(crime.red)
View(crime.join)
crime.red <- dplyr::select(crime.join, -c(3, NAmore50)
crime.red <- dplyr::select(crime.join, -c(3, NAmore50))
crime.red <- dplyr::select(crime.join, -c(3, NAmore50))
View(crime.red)
# V3003 is the same as YEARQQ
with(crime.join, table(YEARQQ))
# V3003 is the same as YEARQ
with(crime.join, table(YEARQ))
View(crime)
crime.red <- dplyr::select(crime.join, -c(3,6, NAmore50))
View(crime.red)
crime.red <- dplyr::select(crime.join, -c(3,6, NAmore50))
View(crime.red)
# 2 Age Columns,
cor(crime.join$V3013, crime.join$V3014)
crime.join$V3014
# 2 Age Columns,
cov(crime.join$V3013, crime.join$V3014)
# 2 Age Columns,
cov(crime.join$V3013[1:30], crime.join$V3014[1:10])
# 2 Age Columns,
cov(crime.join$V3013[1:30], crime.join$V3014)
# 2 Age Columns,
cov(crime.join$V3013, crime.join$V3014)
# 2 Age Columns,
cor(crime.join$V3013, crime.join$V3014)
# 2 Age Columns,
cor(crime.join$V3013, crime.join$V3014, type = "kendall")
?cor
# 2 Age Columns,
cor(crime.join$V3013, crime.join$V3014, method = "kendall")
# Lots of columns are strata numbers, which could be explored later, but for the purpose of this analysis, will not include
# V3006 Household number, could be interesting, ref codebook, not sure how to interpret yet
# 2 Age columns, drop the allocated one
data.frame(crime.join$V3013, crime.join$V3014)
cols2drop <- c("V3002", "V3004", "V3005", "V3008", "V3009", "V3010", "V3014", "V3018", "V3024A", "V3026", "V3027")
crime.red <- dplyr::select(crime.join, -c(NAmore50))
crime.red <- dplyr::select(crime.join, -c(cols2drop))
cols2drop <- c(V3001, "V3002", "V3003", "V3004", "V3005", "V3008", "V3009", "V3010", "V3014", "V3018", "V3024A", "V3026", "V3027")
View(crime.red)
crime.red <- dplyr::select(crime.join, -c(cols2drop))
View(crime.red)
crime.red <- dplyr::select(crime.join, -c(NAmore50))
crime.red <- dplyr::select(crime.red, -c(cols2drop))
View(crime.red)
